/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
#include <stddef.h>
#include "flvmuxer/xiecc_rtmp.h"
/* Header for class net_butterflytv_rtmp_client_RtmpClient */

#ifndef _Included_net_butterflytv_rtmp_client_RtmpClient
#define _Included_net_butterflytv_rtmp_client_RtmpClient
#ifdef __cplusplus
extern "C" {
#endif

/*
 * Class:     net_butterflytv_rtmp_client_RtmpClient
 * Method:    read
 * Signature: ([CI)I
 */
JNIEXPORT jint JNICALL Java_net_butterflytv_rtmp_1client_RtmpClient_nativeRead
  (JNIEnv *, jobject, jbyteArray, jint, jint, jlong);

/*
 * Class:     net_butterflytv_rtmp_client_RtmpClient
 * Method:    write
 * Signature: ([CI)I
 */
JNIEXPORT jint JNICALL Java_net_butterflytv_rtmp_1client_RtmpClient_nativeWrite
  (JNIEnv *, jobject, jcharArray, jint, jlong);

/*
 * Class:     net_butterflytv_rtmp_client_RtmpClient
 * Method:    seek
 * Signature: (I)I
 */
JNIEXPORT jint JNICALL Java_net_butterflytv_rtmp_1client_RtmpClient_seek
  (JNIEnv *, jobject, jint);

/*
 * Class:     net_butterflytv_rtmp_client_RtmpClient
 * Method:    pause
 * Signature: (I)I
 */
JNIEXPORT bool JNICALL Java_net_butterflytv_rtmp_1client_RtmpClient_nativePause
  (JNIEnv *, jobject, jboolean, jlong);

/*
 * Class:     net_butterflytv_rtmp_client_RtmpClient
 * Method:    close
 * Signature: ()I
 */
JNIEXPORT void JNICALL Java_net_butterflytv_rtmp_1client_RtmpClient_nativeClose
  (JNIEnv *, jobject, jlong);


JNIEXPORT bool JNICALL
Java_net_butterflytv_rtmp_1client_RtmpClient_nativeIsConnected(JNIEnv *env, jobject instance, jlong);

JNIEXPORT void JNICALL
Java_net_butterflytv_rtmp_1client_RTMPMuxer_write_1flv_1header(JNIEnv *env, jobject instance,
                                                               jboolean is_have_audio,
                                                               jboolean is_have_video) {
    write_flv_header(is_have_audio, is_have_video);
}


JNIEXPORT void JNICALL
Java_net_butterflytv_rtmp_1client_RTMPMuxer_file_1open(JNIEnv *env, jobject instance,
                                                       jstring filename_) {
    const char *filename = (*env)->GetStringUTFChars(env, filename_, 0);

    flv_file_open(filename);

    (*env)->ReleaseStringUTFChars(env, filename_, filename);
}

JNIEXPORT void JNICALL
Java_net_butterflytv_rtmp_1client_RTMPMuxer_file_1close(JNIEnv *env, jobject instance) {

    flv_file_close();

}

JNIEXPORT jlong JNICALL
Java_net_butterflytv_rtmp_1client_RtmpClient_nativeAlloc(JNIEnv *env, jobject instance);

JNIEXPORT jint JNICALL
Java_net_butterflytv_rtmp_1client_RTMPMuxer_read(JNIEnv *env, jobject instance, jbyteArray data_,
                                                 jint offset, jint size);
JNIEXPORT jint JNICALL
Java_net_butterflytv_rtmp_1client_RTMPMuxer_isConnected(JNIEnv *env, jobject instance);

#ifdef __cplusplus
}
#endif
#endif
